/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ClassesBasicas.ClassificacaoProblema;
import ClassesBasicas.Cliente;
import ClassesBasicas.Funcionario;
import ClassesBasicas.OrdemServico;
import Negocios.NegocioClassificacaoProblema;
import Negocios.NegocioCliente;
import Negocios.NegocioFuncionario;
import Negocios.NegocioOrdemServico;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Afonso
 */
public class EditarOrdemGUI extends javax.swing.JFrame {
 
    ArrayList<OrdemServico> respostaOrdem;
    ArrayList<Cliente> respostaCliente;
    ArrayList<Funcionario> respostaFuncionario;
    ArrayList<ClassificacaoProblema> respostaClass;
    
    public void ListarOrdemServico()
    {
        try
        {
            OrdemServico ordemServico = new OrdemServico();
            NegocioOrdemServico negocioOrdem = new NegocioOrdemServico();
            this.respostaOrdem = negocioOrdem.listarOrdemServicoAberta(ordemServico);
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new Object[]{"Nº Ordem","Cliente", "CPF Cliente", "Funcionário", "Data do Cadastro", "Problema"});
            
            for (OrdemServico oS : this.respostaOrdem) 
            {
                modelo.addRow(new Object[]{oS.getNumero(), oS.getCliente().getNome(), oS.getCliente().getCpf(), oS.getFuncionario().getNome(), oS.getDataCadastro(), oS.getClassificacaoProblema().getNomeClassProblema()});                
            }
            
            jTableOrdem.setModel(modelo);           
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    public EditarOrdemGUI() {
        initComponents();
        ListarOrdemServico();
        setLocationRelativeTo(this);
        jTextAreaDescricaoProblema.setLineWrap(true);
        jTextAreaDescricaoProblema.setWrapStyleWord(true);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ordens de Serviço", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12), new java.awt.Color(0, 0, 0)));
        jPanel1.setBackground(Color.pink);
        getContentPane().setBackground(Color.pink);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldDataCadastro = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescricaoProblema = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jButtonEditar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableOrdem = new javax.swing.JTable();
        jCheckBoxCliente = new javax.swing.JCheckBox();
        jCheckBoxFuncionario = new javax.swing.JCheckBox();
        jCheckBoxClass = new javax.swing.JCheckBox();
        jTextFieldNumeroOrdem = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldProcurarCPF = new javax.swing.JTextField();
        jButtonProcurarCPF = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldProcurarNome = new javax.swing.JTextField();
        jButtonProcurarNome = new javax.swing.JButton();
        jLabelProcurarRG = new javax.swing.JLabel();
        jTextFieldProcurarRG = new javax.swing.JTextField();
        jButtonProcurarRG = new javax.swing.JButton();
        jTextFieldCPFCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldMatriculaFuncionario = new javax.swing.JTextField();
        jTextFieldCodClass = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jCheckBox1.setText("jCheckBox1");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel5.setText("Data do Cadastro");

        jTextAreaDescricaoProblema.setColumns(20);
        jTextAreaDescricaoProblema.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescricaoProblema);

        jLabel6.setText("Descrição do Problema ");

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");

        jTableOrdem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableOrdem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableOrdemMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableOrdemMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTableOrdem);

        jCheckBoxCliente.setText("Clientes");
        jCheckBoxCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxClienteActionPerformed(evt);
            }
        });

        jCheckBoxFuncionario.setText("Funcionários");
        jCheckBoxFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFuncionarioActionPerformed(evt);
            }
        });

        jCheckBoxClass.setText("Classificação");
        jCheckBoxClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxClassActionPerformed(evt);
            }
        });

        jTextFieldNumeroOrdem.setEnabled(false);

        jLabel7.setText("Nº Ordem");

        jLabel2.setText("Pesquisar CPF Cliente");

        jTextFieldProcurarCPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldProcurarCPFKeyTyped(evt);
            }
        });

        jButtonProcurarCPF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens_Ícones/lupa (2).png"))); // NOI18N
        jButtonProcurarCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcurarCPFActionPerformed(evt);
            }
        });

        jLabel8.setText("Procurar Cliente");

        jTextFieldProcurarNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldProcurarNomeActionPerformed(evt);
            }
        });
        jTextFieldProcurarNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldProcurarNomeKeyTyped(evt);
            }
        });

        jButtonProcurarNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens_Ícones/lupa (2).png"))); // NOI18N
        jButtonProcurarNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcurarNomeActionPerformed(evt);
            }
        });

        jLabelProcurarRG.setText("Pesquisar Funcionário");

        jTextFieldProcurarRG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldProcurarRGKeyTyped(evt);
            }
        });

        jButtonProcurarRG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens_Ícones/lupa (2).png"))); // NOI18N
        jButtonProcurarRG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcurarRGActionPerformed(evt);
            }
        });

        jTextFieldCPFCliente.setEditable(false);

        jLabel3.setText("CPF do Cliente");

        jLabel4.setText("Matrícula do Funcionário");

        jTextFieldMatriculaFuncionario.setEditable(false);

        jTextFieldCodClass.setEditable(false);

        jLabel1.setText("Código da Classificação");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBoxCliente)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxFuncionario)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxClass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNumeroOrdem, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelProcurarRG)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldProcurarRG)
                            .addComponent(jTextFieldProcurarNome, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldProcurarCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonProcurarNome)
                            .addComponent(jButtonProcurarCPF)
                            .addComponent(jButtonProcurarRG))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextFieldCPFCliente))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(14, 14, 14)
                                    .addComponent(jTextFieldCodClass, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldMatriculaFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxCliente)
                    .addComponent(jCheckBoxFuncionario)
                    .addComponent(jCheckBoxClass)
                    .addComponent(jTextFieldNumeroOrdem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonProcurarNome, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldProcurarNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldMatriculaFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonProcurarCPF)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextFieldProcurarCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldCodClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldProcurarRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelProcurarRG))
                            .addComponent(jButtonProcurarRG))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCPFCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(21, 21, 21))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEditar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonEditar))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        try
        {
            if(jTextFieldNumeroOrdem.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Escolha a ordem", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            ListarOrdemServico();
            jCheckBoxFuncionario.setSelected(false);
            jCheckBoxCliente.setSelected(false);
            jCheckBoxClass.setSelected(false);
            jCheckBoxFuncionario.setEnabled(true);
            jCheckBoxCliente.setEnabled(true);
            jCheckBoxClass.setEnabled(true);
            OrdemServico ordemServico = new OrdemServico();
            ordemServico.setDataCadastro(Date.valueOf(jTextFieldDataCadastro.getText().replace("/", "-")));
            ordemServico.setDescricaoProblema(jTextAreaDescricaoProblema.getText());
            ordemServico.setNumero(Integer.parseInt(jTextFieldNumeroOrdem.getText()));
            ordemServico.getFuncionario().setMatricula(Integer.parseInt(jTextFieldMatriculaFuncionario.getText()));
            ordemServico.getClassificacaoProblema().setCod_ClassProblema(Integer.parseInt(jTextFieldCodClass.getText()));
            ordemServico.getCliente().setCpf(jTextFieldCPFCliente.getText());
            NegocioOrdemServico negocioOrdem = new NegocioOrdemServico();
            negocioOrdem.editarOrdemServico(ordemServico);
            jTextFieldCPFCliente.setText("");
            jTextFieldMatriculaFuncionario.setText("");
            jTextFieldNumeroOrdem.setText("");
            jTextFieldDataCadastro.setText("");
            jTextAreaDescricaoProblema.setText("");
            jTextFieldCodClass.setText("");
            JOptionPane.showMessageDialog(this, "OS editada com sucesso", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jTableOrdemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOrdemMouseClicked
        MouseEvent e = evt;      
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        int index = jTableOrdem.getSelectedRow();
        int click = e.getClickCount();                
        if(click == 2)
        {   
            if(jCheckBoxCliente.isSelected() == false && jCheckBoxClass.isSelected() == false && jCheckBoxFuncionario.isSelected() == false)
            {
                OrdemServico ordemServico = this.respostaOrdem.get(index);
                jTextFieldCPFCliente.setText(ordemServico.getCliente().getCpf());
                jTextFieldMatriculaFuncionario.setText(String.valueOf(ordemServico.getFuncionario().getMatricula()));
                jTextFieldNumeroOrdem.setText(String.valueOf(ordemServico.getNumero()));
                jTextFieldDataCadastro.setText(ordemServico.getDataCadastro().toString().replace("-", "/"));
                jTextAreaDescricaoProblema.setText(ordemServico.getDescricaoProblema());
                jTextFieldCodClass.setText(String.valueOf(ordemServico.getClassificacaoProblema().getCod_ClassProblema()));
            }           
            if(jCheckBoxCliente.isSelected() == true)
            {
                Cliente cliente = this.respostaCliente.get(index);
                jTextFieldCPFCliente.setText(cliente.getCpf());
            }
            if(jCheckBoxFuncionario.isSelected() == true)
            {
                Funcionario funcionario = this.respostaFuncionario.get(index);
                jTextFieldMatriculaFuncionario.setText(String.valueOf(funcionario.getMatricula()));
            }
            if(jCheckBoxClass.isSelected() == true)
            {
                ClassificacaoProblema classProblema =this.respostaClass.get(index);
                jTextAreaDescricaoProblema.setText(classProblema.getDescricao());
                jTextFieldCodClass.setText(String.valueOf(classProblema.getCod_ClassProblema()));
            }
        }
    }//GEN-LAST:event_jTableOrdemMouseClicked

    private void jTableOrdemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOrdemMousePressed
        jTableOrdem.editingCanceled(null);
        jTableOrdem.editingStopped(null);
    }//GEN-LAST:event_jTableOrdemMousePressed

    private void jCheckBoxClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxClienteActionPerformed
        if(jCheckBoxCliente.isSelected() == true)
        {
            try
            {
                jLabelProcurarRG.setText("Procurar RG");
                jLabel2.setText("Procurar CPF");
                jLabel8.setText("Procurar Nome");
                jLabelProcurarRG.setEnabled(true);
                jTextFieldProcurarRG.setEnabled(true);
                jButtonProcurarRG.setEnabled(true);
                jCheckBoxFuncionario.setEnabled(false);
                jCheckBoxClass.setEnabled(false);
                Cliente cliente = new Cliente();
                NegocioCliente negocioCliente = new NegocioCliente();
                this.respostaCliente = negocioCliente.listarClientes(cliente);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Nome", "CPF", "RG"});
                for (Cliente c : this.respostaCliente) 
                {
                    modelo.addRow(new Object[]{c.getNome(), c.getCpf(), c.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
           catch (Exception e)
           {
               JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
           }
        }
        if(jCheckBoxCliente.isSelected() == false)
        {
            jLabelProcurarRG.setText("Pesquisar Funcionário");
            jLabelProcurarRG.setEnabled(true);
            jTextFieldProcurarRG.setEnabled(true);
            jButtonProcurarRG.setEnabled(true);
            jCheckBoxFuncionario.setEnabled(true);
            jCheckBoxClass.setEnabled(true);
            ListarOrdemServico();
        }
    }//GEN-LAST:event_jCheckBoxClienteActionPerformed

    private void jCheckBoxFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFuncionarioActionPerformed
        if(jCheckBoxFuncionario.isSelected() == true)
        {
            try
            {
                jLabelProcurarRG.setText("Procurar RG");
                jLabel2.setText("Procurar CPF");
                jLabel8.setText("Procurar Nome");
                jLabelProcurarRG.setEnabled(true);
                jTextFieldProcurarRG.setEnabled(true);
                jButtonProcurarRG.setEnabled(true);
                jCheckBoxCliente.setEnabled(false);
                jCheckBoxClass.setEnabled(false);
                Funcionario funcionario = new Funcionario();
                NegocioFuncionario negocioFuncionario = new NegocioFuncionario();
                this.respostaFuncionario = negocioFuncionario.listarFuncionario(funcionario);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Nome", "CPF", "RG"});
                
                for (Funcionario f : this.respostaFuncionario) 
                {
                    modelo.addRow(new Object[]{f.getNome(), f.getCpf(), f.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
        if(jCheckBoxFuncionario.isSelected() == false)
        {
            jLabel2.setText("Procurar CPF Cliente");
            jLabel8.setText("Procurar Cliente");
            jLabelProcurarRG.setText("Pesquisar Funcionário");
            jLabelProcurarRG.setEnabled(true);
            jTextFieldProcurarRG.setEnabled(true);
            jButtonProcurarRG.setEnabled(true);
            jCheckBoxCliente.setEnabled(true);
            jCheckBoxClass.setEnabled(true);
            ListarOrdemServico();
        }
    }//GEN-LAST:event_jCheckBoxFuncionarioActionPerformed

    private void jCheckBoxClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxClassActionPerformed
        if(jCheckBoxClass.isSelected() == true)
        {
            try
            {
                jLabel2.setText("Procurar Código");
                jLabel8.setText("Procurar Nome");
                jLabelProcurarRG.setEnabled(false);
                jTextFieldProcurarRG.setEnabled(false);
                jButtonProcurarRG.setEnabled(false);
                jCheckBoxCliente.setEnabled(false);
                jCheckBoxFuncionario.setEnabled(false);
                ClassificacaoProblema classProblema = new ClassificacaoProblema();
                NegocioClassificacaoProblema negocioClass = new NegocioClassificacaoProblema();
                this.respostaClass = negocioClass.listarClassProblema(classProblema);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Código", "Nome"});
                
                for (ClassificacaoProblema cl : this.respostaClass) 
                {
                    modelo.addRow(new Object[]{cl.getCod_ClassProblema(), cl.getNomeClassProblema()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
        if(jCheckBoxClass.isSelected() == false)
        {
            jLabel2.setText("Procurar CPF Cliente");
            jLabel8.setText("Procurar Cliente");
            jLabelProcurarRG.setEnabled(true);
            jTextFieldProcurarRG.setEnabled(true);
            jButtonProcurarRG.setEnabled(true);
            jCheckBoxFuncionario.setEnabled(true);
            jCheckBoxCliente.setEnabled(true);
            ListarOrdemServico();
        }
    }//GEN-LAST:event_jCheckBoxClassActionPerformed

    private void jButtonProcurarNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcurarNomeActionPerformed
        if(jCheckBoxCliente.isSelected() == false && jCheckBoxClass.isSelected() == false && jCheckBoxFuncionario.isSelected() == false)
        {
           try
            {
                OrdemServico ordemServico = new OrdemServico();
                ordemServico.getCliente().setNome(jTextFieldProcurarNome.getText());
                ordemServico.getCliente().setCpf(jTextFieldProcurarCPF.getText());
                NegocioOrdemServico negocioOrdem = new NegocioOrdemServico();
                this.respostaOrdem = negocioOrdem.listarOrdemServicoAberta(ordemServico);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Número Ordem" ,"Cliente", "CPF Cliente", "Funcionário", "Data do Cadastro", "Classificação"});

                for (OrdemServico oS : this.respostaOrdem) 
                {
                    modelo.addRow(new Object[]{oS.getNumero(), oS.getCliente().getNome(), oS.getCliente().getCpf(), oS.getFuncionario().getNome(), oS.getDataCadastro(), oS.getClassificacaoProblema().getNomeClassProblema()});                
                }
                jTableOrdem.setModel(modelo);  
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }     
        if(jCheckBoxCliente.isSelected() == true)
        {
            try
            {
                Cliente cliente = new Cliente();
                cliente.setCpf(jTextFieldProcurarCPF.getText());
                cliente.setNome(jTextFieldProcurarNome.getText());
                cliente.setRg(jTextFieldProcurarRG.getText());
                NegocioCliente negocioCliente = new NegocioCliente();
                this.respostaCliente = negocioCliente.listarClientes(cliente);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Nome", "CPF", "RG"});

                for (Cliente c : this.respostaCliente) 
                {
                    modelo.addRow(new Object []{ c.getNome(), c.getCpf(), c.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }
        if(jCheckBoxFuncionario.isSelected() == true)
        {
            try
            {
                Funcionario funcionario = new Funcionario();
                funcionario.setCpf(jTextFieldProcurarCPF.getText());
                funcionario.setNome(jTextFieldProcurarNome.getText());
                funcionario.setRg(jTextFieldProcurarRG.getText());
                NegocioFuncionario negocioFuncionario = new NegocioFuncionario();
                this.respostaFuncionario = negocioFuncionario.listarFuncionario(funcionario);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Nome", "CPF", "RG"});

                for (Funcionario f : this.respostaFuncionario) 
                {
                    modelo.addRow(new Object []{f.getNome(), f.getCpf(), f.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }
        if(jCheckBoxClass.isSelected() == true)
        {
            try
            {
                ClassificacaoProblema classProblema = new ClassificacaoProblema();
                classProblema.setNomeClassProblema(jTextFieldProcurarNome.getText());
                classProblema.setCod_ClassProblema(Integer.parseInt(jTextFieldProcurarCPF.getText()));
                NegocioClassificacaoProblema negocioClass = new NegocioClassificacaoProblema();
                this.respostaClass = negocioClass.listarClassProblema(classProblema);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Código", "Nome"});

                for (ClassificacaoProblema cl : this.respostaClass) 
                {
                    modelo.addRow(new Object []{cl.getCod_ClassProblema(), cl.getNomeClassProblema()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        
        }
    }//GEN-LAST:event_jButtonProcurarNomeActionPerformed

    private void jTextFieldProcurarNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProcurarNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProcurarNomeActionPerformed

    private void jButtonProcurarCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcurarCPFActionPerformed
        if(jCheckBoxCliente.isSelected() == false && jCheckBoxClass.isSelected() == false && jCheckBoxFuncionario.isSelected() == false)
        {
            try
            {
                OrdemServico ordemServico = new OrdemServico();
                ordemServico.getCliente().setCpf(jTextFieldProcurarCPF.getText());
                ordemServico.getCliente().setNome(jTextFieldProcurarNome.getText());
                NegocioOrdemServico negocioOrdem = new NegocioOrdemServico();
                this.respostaOrdem = negocioOrdem.listarOrdemServicoAberta(ordemServico);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Número Ordem" ,"Cliente", "CPF Cliente", "Funcionário", "Data do Cadastro", "Classificação"});

                for (OrdemServico oS : this.respostaOrdem) 
                {
                    modelo.addRow(new Object[]{oS.getNumero(), oS.getCliente().getNome(), oS.getCliente().getCpf(), oS.getFuncionario().getNome(), oS.getDataCadastro(), oS.getClassificacaoProblema().getNomeClassProblema()});                
                }
                jTableOrdem.setModel(modelo);  
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }   
        if(jCheckBoxCliente.isSelected() == true)
        {
            try
            {
                Cliente cliente = new Cliente();
                cliente.setCpf(jTextFieldProcurarCPF.getText());
                cliente.setNome(jTextFieldProcurarNome.getText());
                cliente.setRg(jTextFieldProcurarRG.getText());
                NegocioCliente negocioCliente = new NegocioCliente();
                this.respostaCliente = negocioCliente.listarClientes(cliente);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Nome", "CPF", "RG"});

                for (Cliente c : this.respostaCliente) 
                {
                    modelo.addRow(new Object []{ c.getNome(), c.getCpf(), c.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }
        if(jCheckBoxFuncionario.isSelected() == true)
        {
            try
            {
                Funcionario funcionario = new Funcionario();
                funcionario.setCpf(jTextFieldProcurarCPF.getText());
                funcionario.setNome(jTextFieldProcurarNome.getText());
                funcionario.setRg(jTextFieldProcurarRG.getText());
                NegocioFuncionario negocioFuncionario = new NegocioFuncionario();
                this.respostaFuncionario = negocioFuncionario.listarFuncionario(funcionario);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Nome", "CPF", "RG"});

                for (Funcionario f : this.respostaFuncionario) 
                {
                    modelo.addRow(new Object []{f.getNome(), f.getCpf(), f.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }
        if(jCheckBoxClass.isSelected() == true)
        {
            try
            {
                ClassificacaoProblema classProblema = new ClassificacaoProblema();
                classProblema.setNomeClassProblema(jTextFieldProcurarNome.getText());
                classProblema.setCod_ClassProblema(Integer.parseInt(jTextFieldProcurarCPF.getText()));
                NegocioClassificacaoProblema negocioClass = new NegocioClassificacaoProblema();
                this.respostaClass = negocioClass.listarClassProblema(classProblema);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Código", "Nome"});

                for (ClassificacaoProblema cl : this.respostaClass) 
                {
                    modelo.addRow(new Object []{cl.getCod_ClassProblema(), cl.getNomeClassProblema()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        
        }
    }//GEN-LAST:event_jButtonProcurarCPFActionPerformed

    private void jTextFieldProcurarNomeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProcurarNomeKeyTyped
        String caracteres = "0123456789+-.*/+=§º~(){}[]&%$#@!|:;><,•◘○♦♣♠♥☻☺?";
        
        if(caracteres.contains(evt.getKeyChar() + ""))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldProcurarNomeKeyTyped

    private void jTextFieldProcurarCPFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProcurarCPFKeyTyped
        String caracteres = "0123456789";
        
        if(!caracteres.contains(evt.getKeyChar() + ""))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldProcurarCPFKeyTyped

    private void jButtonProcurarRGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcurarRGActionPerformed
        if(jCheckBoxCliente.isSelected() == false && jCheckBoxClass.isSelected() == false && jCheckBoxFuncionario.isSelected() == false)
        {
           try
            {
                OrdemServico ordemServico = new OrdemServico();
                ordemServico.getCliente().setNome(jTextFieldProcurarNome.getText());
                ordemServico.getCliente().setCpf(jTextFieldProcurarCPF.getText());
                ordemServico.getFuncionario().setNome(jTextFieldProcurarRG.getText());
                NegocioOrdemServico negocioOrdem = new NegocioOrdemServico();
                this.respostaOrdem = negocioOrdem.listarOrdemServicoAberta(ordemServico);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Número Ordem" ,"Cliente", "CPF Cliente", "Funcionário", "Data do Cadastro", "Problema"});

                for (OrdemServico oS : this.respostaOrdem) 
                {
                    modelo.addRow(new Object[]{oS.getNumero(), oS.getCliente().getNome(), oS.getCliente().getCpf(), oS.getFuncionario().getNome(), oS.getDataCadastro(), oS.getClassificacaoProblema().getNomeClassProblema()});                
                }
                jTableOrdem.setModel(modelo);  
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }     
        if(jCheckBoxCliente.isSelected() == true)
        {
            try
            {
                Cliente cliente = new Cliente();
                cliente.setCpf(jTextFieldProcurarCPF.getText());
                cliente.setNome(jTextFieldProcurarNome.getText());
                cliente.setRg(jTextFieldProcurarRG.getText());
                NegocioCliente negocioCliente = new NegocioCliente();
                this.respostaCliente = negocioCliente.listarClientes(cliente);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Nome", "CPF", "RG"});

                for (Cliente c : this.respostaCliente) 
                {
                    modelo.addRow(new Object []{c.getNome(), c.getCpf(), c.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }
        if(jCheckBoxFuncionario.isSelected() == true)
        {
            try
            {
                Funcionario funcionario = new Funcionario();
                funcionario.setCpf(jTextFieldProcurarCPF.getText());
                funcionario.setNome(jTextFieldProcurarNome.getText());
                funcionario.setRg(jTextFieldProcurarRG.getText());
                NegocioFuncionario negocioFuncionario = new NegocioFuncionario();
                this.respostaFuncionario = negocioFuncionario.listarFuncionario(funcionario);
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[] {"Nome", "CPF", "RG"});

                for (Funcionario f : this.respostaFuncionario) 
                {
                    modelo.addRow(new Object []{f.getNome(), f.getCpf(), f.getRg()});
                }
                jTableOrdem.setModel(modelo);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }    
        }
    }//GEN-LAST:event_jButtonProcurarRGActionPerformed

    private void jTextFieldProcurarRGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProcurarRGKeyTyped
        String caracteres = "0123456789+-.*/+=§º~(){}[]&%$#@!|:;><,•◘○♦♣♠♥☻☺?";
        
        if(caracteres.contains(evt.getKeyChar() + ""))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldProcurarRGKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarOrdemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarOrdemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarOrdemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarOrdemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditarOrdemGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonProcurarCPF;
    private javax.swing.JButton jButtonProcurarNome;
    private javax.swing.JButton jButtonProcurarRG;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxClass;
    private javax.swing.JCheckBox jCheckBoxCliente;
    private javax.swing.JCheckBox jCheckBoxFuncionario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelProcurarRG;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableOrdem;
    private javax.swing.JTextArea jTextAreaDescricaoProblema;
    private javax.swing.JTextField jTextFieldCPFCliente;
    private javax.swing.JTextField jTextFieldCodClass;
    private javax.swing.JTextField jTextFieldDataCadastro;
    private javax.swing.JTextField jTextFieldMatriculaFuncionario;
    private javax.swing.JTextField jTextFieldNumeroOrdem;
    private javax.swing.JTextField jTextFieldProcurarCPF;
    private javax.swing.JTextField jTextFieldProcurarNome;
    private javax.swing.JTextField jTextFieldProcurarRG;
    // End of variables declaration//GEN-END:variables
}
